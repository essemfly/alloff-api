name: Deploy to Amazon ECS - DEV

on:
  push:
    branches:
      - flannels

env:
  ENV: dev
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: alloff-api-dev
  ECS_TASK_DEFINITION: .aws/task-definition-dev.json
  ECS_GRPC_TASK_DEFINITION: .aws/task-definition-grpc-dev.json
  ECS_CLUSTER: alloff-api
  ECS_SERVICE: alloff-api-dev
  ECS_GRPC_SERVICE: alloff-grpc-dev
  CONTAINER_NAME: alloff-api-dev
  CONTAINER_GRPC_NAME: alloff-grpc-dev

jobs:
  codecov:
    name: codecov
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: github.com/lessbutter/alloff-api
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    steps:
      - name: Set up Go 1.18
        uses: actions/setup-go@v1
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Generate coverage report
        run: |
          go test `go list ./... | grep -v examples` -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          verbose: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: |
            github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          name: id_rsa # optional
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
     
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure ENV variables
        run: |
          echo "COMMIT_SHA=${{ github.sha }}
          ${{ secrets.ENV_DEV }}" > .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg ssh_prv_key="${{ secrets.SSH_KEY }}" --build-arg git_token="${{ secrets.GIT_TOKEN }}" -f .docker/Dockerfile.dev -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      
      - name: (GRPC) Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_GRPC_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_GRPC_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: (GRPC) Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_GRPC_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # - name: action-slack
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     author_name: Github Action # default: 8398a7@action-slack
      #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      #   if: always() # Pick up events even if the job fails or is canceled.
