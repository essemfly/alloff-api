scalar Date

enum OrderItemTypeEnum {
  UNKNOWN
  TIMEDEAL
  EXHIBITION
  NORMAL
}

enum OrderStatusEnum {
  UNKNOWN
  CREATED
  RECREATED
  PAYMENT_PENDING
  PAYMENT_FINISHED
}

enum OrderItemStatusEnum {
  UNKNOWN
  CREATED
  RECREATED
  PAYMENT_PENDING
  PAYMENT_FINISHED
  PRODUCT_PREPARING
  FOREIGN_PRODUCT_INSPECTING #해외배송이고, 국내배송으로 치면 DELIVERY_PREPARING
  DELIVERY_PREPARING
  FOREIGN_DELIVERY_STATRTED
  DELIVERY_STARTED
  DELIVERY_FINISHED
  CONFIRM_PAYMENT
  CANCEL_FINISHED
  EXCHANGE_REQUESTED
  EXCHANGE_PENDING
  EXCHANGE_FINISHED
  RETURN_REQUESTED
  RETURN_PENDING
  RETURN_FINISHED
}

enum PaymentStatusEnum {
  CREATED
  CONFIRMED
  TIME_OUT
  CANCLED
  REFUND_REQUESTED
  REFUND_FINISHED
}

type OrderItem {
  id: ID!
  productId: String!
  productName: String!
  productImg: String!
  brandKeyname: String!
  brandKorname: String!
  removed: Boolean!
  salesPrice: Int!
  selectsize: String!
  quantity: Int!
  orderItemType: OrderItemTypeEnum!
  orderItemStatus: OrderItemStatusEnum!
  cancelDescription: CancelDescription!
  deliveryDescription: DeliveryDescription!
  refundInfo: RefundInfo
  deliveryTrackingNumber: String!
  deliveryTrackingUrl: String!
  createdAt: Date!
  updatedAt: Date!
  orderedAt: Date!
  deliveryStartedAt: Date!
  deliveryFinishedAt: Date!
  cancelRequestedAt: Date!
  cancelFinishedAt: Date!
  confirmedAt: Date!
}

input OrderItemInput {
  productId: String!
  productGroupId: String!
  selectsize: String!
  quantity: Int!
}

input OrderInput {
  orders: [OrderItemInput!]!
  productPrice: Int!
}

type OrderInfo {
  id: ID!
  orders: [OrderItem!]!
  productPrice: Int!
  deliveryPrice: Int!
  totalPrice: Int!
  refundPrice: Int
  userMemo: String!
  createdAt: Date!
  updatedAt: Date!
  orderedAt: Date!
}

type RefundInfo {
  refundFee: Int!
  refundAmount: Int!
  createdAt: Date!
  updatedAt: Date!
}

input PaymentClientInput {
  pg: String!
  payMethod: String!
  merchantUid: String!
  amount: Int!
  name: String
  buyerName: String
  buyerMobile: String
  buyerAddress: String
  buyerPostCode: String
  memo: String
  appScheme: String
}

type PaymentInfo {
  pg: String!
  payMethod: String!
  merchantUid: String!
  amount: Int!
  name: String!
  buyerName: String!
  buyerMobile: String!
  buyerAddress: String!
  buyerPostCode: String!
  company: String!
  appScheme: String!
}

input OrderResponse {
  success: Boolean!
  imp_uid: String!
  merchant_uid: String!
  error_msg: String!
}

type OrderWithPayment {
  success: Boolean!
  errorMsg: String!
  paymentMethods: [PaymentMethod!]!
  user: User!
  paymentInfo: PaymentInfo
  order: OrderInfo
}

type PaymentMethod {
  label: String!
  code: String!
}

type PaymentStatus {
  success: Boolean!
  errorMsg: String!
  order: OrderInfo
  paymentInfo: PaymentInfo
}

type PaymentResult {
  success: Boolean!
  errorMsg: String!
  order: OrderInfo
  paymentInfo: PaymentInfo
}

type OrderValidityResult {
  available: Boolean!
  errorMsgs: [String!]
  order: OrderInfo!
}

type OrderItemStatusDescription {
  deliveryType: DeliveryType!
  statusEnum: OrderItemStatusEnum!
  description: String!
}

extend type Query {
  order(id: String!): OrderInfo!
  orders: [OrderInfo!]!
  orderItemStatus: [OrderItemStatusDescription!]!
}

extend type Mutation {
  checkOrder(input: OrderInput): OrderValidityResult!
  requestOrder(input: OrderInput): OrderWithPayment!
  requestPayment(input: PaymentClientInput): PaymentStatus!
  cancelPayment(input: PaymentClientInput): PaymentStatus!
  handlePaymentResponse(input: OrderResponse): PaymentResult!

  cancelOrderItem(orderId: String!, orderItemId: String!): PaymentStatus!
  confirmOrderItem(orderId: String!, orderItemId: String!): PaymentStatus!
}
