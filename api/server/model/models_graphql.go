// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package server

import (
	"fmt"
	"io"
	"strconv"
)

type AlloffCategory struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	KeyName  string `json:"keyName"`
	Level    int    `json:"level"`
	ParentID string `json:"parentId"`
	ImgURL   string `json:"imgUrl"`
}

type AlloffCategoryID struct {
	ID string `json:"id"`
}

type AlloffCategoryInput struct {
	ParentID *string `json:"parentId"`
}

type AlloffCategoryProducts struct {
	Alloffcategory *AlloffCategory `json:"alloffcategory"`
	Products       []*Product      `json:"products"`
	AllBrands      []*Brand        `json:"allBrands"`
	TotalCount     int             `json:"totalCount"`
	Offset         int             `json:"offset"`
	Limit          int             `json:"limit"`
	SelectedBrands []string        `json:"selectedBrands"`
}

type AlloffProduct struct {
	ID                  string       `json:"id"`
	Brand               *Brand       `json:"brand"`
	Name                string       `json:"name"`
	ProductGroupID      string       `json:"productGroupId"`
	Producttype         []string     `json:"producttype"`
	Description         []string     `json:"description"`
	OriginalPrice       int          `json:"originalPrice"`
	DiscountedPrice     int          `json:"discountedPrice"`
	DiscountRate        int          `json:"discountRate"`
	Images              []string     `json:"images"`
	Removed             bool         `json:"removed"`
	Soldout             bool         `json:"soldout"`
	Inventory           []*Inventory `json:"inventory"`
	Instruction         *Instruction `json:"instruction"`
	Faults              []*Faults    `json:"faults"`
	SizeDescription     []string     `json:"sizeDescription"`
	CancelDescription   []string     `json:"cancelDescription"`
	DeliveryDescription []string     `json:"deliveryDescription"`
}

type AlloffProductInput struct {
	ProductGroupID  string            `json:"productGroupId"`
	ProductType     []*string         `json:"productType"`
	BrandID         string            `json:"brandId"`
	ProductName     string            `json:"productName"`
	OriginalPrice   string            `json:"originalPrice"`
	DiscountedPrice string            `json:"discountedPrice"`
	Images          []*string         `json:"images"`
	Inventories     []*InventoryInput `json:"inventories"`
}

type Brand struct {
	ID              string       `json:"id"`
	KorName         string       `json:"korName"`
	EngName         string       `json:"engName"`
	KeyName         string       `json:"keyName"`
	LogoImgURL      string       `json:"logoImgUrl"`
	Categories      []*Category  `json:"categories"`
	OnPopular       bool         `json:"onPopular"`
	Description     string       `json:"description"`
	MaxDiscountRate int          `json:"maxDiscountRate"`
	IsOpen          bool         `json:"isOpen"`
	InMaintenance   bool         `json:"inMaintenance"`
	NumNewProducts  int          `json:"numNewProducts"`
	SizeGuide       []*SizeGuide `json:"sizeGuide"`
}

type BrandInput struct {
	BrandID string `json:"brandId"`
}

type BrandItem struct {
	ImgURL string `json:"imgUrl"`
	Brand  *Brand `json:"brand"`
}

type BrandsInput struct {
	OnlyLikes *bool `json:"onlyLikes"`
}

type Category struct {
	ID      string `json:"id"`
	KeyName string `json:"keyName"`
	Name    string `json:"name"`
}

type CategoryProductsInput struct {
	Offset           int            `json:"offset"`
	Limit            int            `json:"limit"`
	AlloffcategoryID string         `json:"alloffcategoryId"`
	BrandIds         []string       `json:"brandIds"`
	Sorting          []*SortingType `json:"sorting"`
}

type CommunityItem struct {
	Name       string            `json:"name"`
	Target     string            `json:"target"`
	TargetType CommunityItemType `json:"targetType"`
	ImgURL     string            `json:"imgUrl"`
}

type Curation struct {
	ID    string          `json:"id"`
	Order int             `json:"order"`
	Title string          `json:"title"`
	Items []*CurationItem `json:"items"`
}

type CurationItem struct {
	ID       string    `json:"id"`
	Img      string    `json:"img"`
	Brand    *Brand    `json:"brand"`
	Category *Category `json:"category"`
}

type Device struct {
	ID                string  `json:"id"`
	DeviceID          string  `json:"deviceId"`
	AllowNotification bool    `json:"allowNotification"`
	UserID            *string `json:"userId"`
}

type Faults struct {
	Image       *string `json:"image"`
	Description string  `json:"description"`
}

type FeaturedItem struct {
	ID       string    `json:"id"`
	Order    int       `json:"order"`
	Brand    *Brand    `json:"brand"`
	Img      string    `json:"img"`
	Category *Category `json:"category"`
}

type HomeItem struct {
	ID             string           `json:"id"`
	Priority       int              `json:"priority"`
	Title          string           `json:"title"`
	ItemType       HomeItemType     `json:"itemType"`
	TargetID       string           `json:"targetId"`
	Sorting        []SortingType    `json:"sorting"`
	Images         []string         `json:"images"`
	CommunityItems []*CommunityItem `json:"communityItems"`
	Brands         []*BrandItem     `json:"brands"`
	Products       []*Product       `json:"products"`
	ProductGroups  []*ProductGroup  `json:"productGroups"`
}

type Instruction struct {
	Thumbnail   string   `json:"thumbnail"`
	Title       string   `json:"title"`
	Description []string `json:"description"`
	Images      []string `json:"images"`
}

type Inventory struct {
	Size     string `json:"size"`
	Quantity int    `json:"quantity"`
}

type InventoryInput struct {
	Size     string `json:"size"`
	Quantity int    `json:"quantity"`
}

type KeyValueInfo struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type LikeBrandInput struct {
	BrandID string `json:"brandId"`
}

type LikeProductInput struct {
	ProductID string `json:"productId"`
}

type LikeProductOutput struct {
	OldProduct *Product `json:"oldProduct"`
	NewProduct *Product `json:"newProduct"`
}

type Login struct {
	UUID   string `json:"uuid"`
	Mobile string `json:"mobile"`
}

type NewUser struct {
	UUID          string  `json:"uuid"`
	Mobile        string  `json:"mobile"`
	Name          *string `json:"name"`
	Email         *string `json:"email"`
	BaseAddress   *string `json:"baseAddress"`
	DetailAddress *string `json:"detailAddress"`
	Postcode      *string `json:"postcode"`
}

type OrderInfo struct {
	ID                  string           `json:"id"`
	Orders              []*ProductOption `json:"orders"`
	OrderType           OrderTypeEnum    `json:"orderType"`
	ProductPrice        int              `json:"productPrice"`
	DeliveryPrice       int              `json:"deliveryPrice"`
	TotalPrice          int              `json:"totalPrice"`
	OrderStatus         OrderStatusEnum  `json:"orderStatus"`
	Memo                string           `json:"memo"`
	DeliveryTrackingURL string           `json:"deliveryTrackingUrl"`
	Created             string           `json:"created"`
	Updated             string           `json:"updated"`
	Finished            string           `json:"finished"`
	OrderedAt           string           `json:"orderedAt"`
	DeliveryStartedAt   string           `json:"deliveryStartedAt"`
	DeliveryFinishedAt  string           `json:"deliveryFinishedAt"`
	CancelRequestedAt   string           `json:"cancelRequestedAt"`
	CancelFinishedAt    string           `json:"cancelFinishedAt"`
	ConfirmedAt         string           `json:"confirmedAt"`
	RefundInfo          *RefundInfo      `json:"refundInfo"`
	CancelOrders        []*ProductOption `json:"cancelOrders"`
}

type OrderInput struct {
	Orders       []*ProductOptionInput `json:"orders"`
	ProductPrice int                   `json:"productPrice"`
}

type OrderResponse struct {
	Success     bool   `json:"success"`
	ImpUID      string `json:"imp_uid"`
	MerchantUID string `json:"merchant_uid"`
	ErrorMsg    string `json:"error_msg"`
}

type OrderValidityResult struct {
	Available bool       `json:"available"`
	ErrorMsgs []string   `json:"errorMsgs"`
	Order     *OrderInfo `json:"order"`
}

type OrderWithPayment struct {
	Success        bool             `json:"success"`
	ErrorMsg       string           `json:"errorMsg"`
	PaymentMethods []*PaymentMethod `json:"paymentMethods"`
	User           *User            `json:"user"`
	PaymentInfo    *PaymentInfo     `json:"paymentInfo"`
	Order          *OrderInfo       `json:"order"`
}

type PaymentClientInput struct {
	Pg            string  `json:"pg"`
	PayMethod     string  `json:"payMethod"`
	MerchantUID   string  `json:"merchantUid"`
	Amount        int     `json:"amount"`
	Name          *string `json:"name"`
	BuyerName     *string `json:"buyerName"`
	BuyerMobile   *string `json:"buyerMobile"`
	BuyerAddress  *string `json:"buyerAddress"`
	BuyerPostCode *string `json:"buyerPostCode"`
	Memo          *string `json:"memo"`
	AppScheme     *string `json:"appScheme"`
}

type PaymentInfo struct {
	Pg            string `json:"pg"`
	PayMethod     string `json:"payMethod"`
	MerchantUID   string `json:"merchantUid"`
	Amount        int    `json:"amount"`
	Name          string `json:"name"`
	BuyerName     string `json:"buyerName"`
	BuyerMobile   string `json:"buyerMobile"`
	BuyerAddress  string `json:"buyerAddress"`
	BuyerPostCode string `json:"buyerPostCode"`
	Company       string `json:"company"`
	AppScheme     string `json:"appScheme"`
}

type PaymentMethod struct {
	Label string `json:"label"`
	Code  string `json:"code"`
}

type PaymentResult struct {
	Success     bool         `json:"success"`
	ErrorMsg    string       `json:"errorMsg"`
	Order       *OrderInfo   `json:"order"`
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

type PaymentStatus struct {
	Success     bool         `json:"success"`
	ErrorMsg    string       `json:"errorMsg"`
	Order       *OrderInfo   `json:"order"`
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

type Product struct {
	ID                  string          `json:"id"`
	Category            *Category       `json:"category"`
	Brand               *Brand          `json:"brand"`
	Name                string          `json:"name"`
	OriginalPrice       int             `json:"originalPrice"`
	Soldout             bool            `json:"soldout"`
	Images              []string        `json:"images"`
	DiscountedPrice     *int            `json:"discountedPrice"`
	DiscountRate        *int            `json:"discountRate"`
	ProductURL          string          `json:"productUrl"`
	SizeAvailable       []string        `json:"sizeAvailable"`
	IsUpdated           bool            `json:"isUpdated"`
	IsNewProduct        bool            `json:"isNewProduct"`
	Removed             bool            `json:"removed"`
	Description         []*KeyValueInfo `json:"description"`
	DeliveryDescription []string        `json:"deliveryDescription"`
	CancelDescription   []string        `json:"cancelDescription"`
}

type ProductGroup struct {
	ID             string           `json:"id"`
	Title          string           `json:"title"`
	ShortTitle     string           `json:"shortTitle"`
	Instruction    []string         `json:"instruction"`
	ImgURL         string           `json:"imgUrl"`
	Alloffproducts []*AlloffProduct `json:"alloffproducts"`
	StartTime      string           `json:"startTime"`
	FinishTime     string           `json:"finishTime"`
	NumAlarms      int              `json:"numAlarms"`
	SetAlarm       bool             `json:"setAlarm"`
}

type ProductOption struct {
	AlloffProduct *AlloffProduct `json:"alloffProduct"`
	Product       *Product       `json:"product"`
	Selectsize    string         `json:"selectsize"`
	Quantity      int            `json:"quantity"`
}

type ProductOptionInput struct {
	ProductID       *string `json:"productId"`
	AlloffProductID *string `json:"alloffProductId"`
	Selectsize      string  `json:"selectsize"`
	Quantity        int     `json:"quantity"`
}

type ProductsInput struct {
	Offset         int            `json:"offset"`
	Limit          int            `json:"limit"`
	Brand          *string        `json:"brand"`
	Category       *string        `json:"category"`
	Alloffcategory *string        `json:"alloffcategory"`
	Sorting        []*SortingType `json:"sorting"`
}

type ProductsOutput struct {
	TotalCount int        `json:"totalCount"`
	Offset     int        `json:"offset"`
	Limit      int        `json:"limit"`
	Products   []*Product `json:"products"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type RefundInfo struct {
	RefundDeliveryPrice int    `json:"refundDeliveryPrice"`
	RefundPrice         int    `json:"refundPrice"`
	RefundAmount        int    `json:"refundAmount"`
	Created             string `json:"created"`
	Updated             string `json:"updated"`
}

type SizeGuide struct {
	Label  string `json:"label"`
	ImgURL string `json:"imgUrl"`
}

type User struct {
	ID            string  `json:"id"`
	UUID          string  `json:"uuid"`
	Mobile        string  `json:"mobile"`
	Name          *string `json:"name"`
	Email         *string `json:"email"`
	BaseAddress   *string `json:"baseAddress"`
	DetailAddress *string `json:"detailAddress"`
	Postcode      *string `json:"postcode"`
}

type UserInfoInput struct {
	UUID          *string `json:"uuid"`
	Name          *string `json:"name"`
	Mobile        *string `json:"mobile"`
	Email         *string `json:"email"`
	BaseAddress   *string `json:"baseAddress"`
	DetailAddress *string `json:"detailAddress"`
	Postcode      *string `json:"postcode"`
}

type CommunityItemType string

const (
	CommunityItemTypeOutlink  CommunityItemType = "OUTLINK"
	CommunityItemTypeInternal CommunityItemType = "INTERNAL"
)

var AllCommunityItemType = []CommunityItemType{
	CommunityItemTypeOutlink,
	CommunityItemTypeInternal,
}

func (e CommunityItemType) IsValid() bool {
	switch e {
	case CommunityItemTypeOutlink, CommunityItemTypeInternal:
		return true
	}
	return false
}

func (e CommunityItemType) String() string {
	return string(e)
}

func (e *CommunityItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommunityItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommunityItemType", str)
	}
	return nil
}

func (e CommunityItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HomeItemType string

const (
	HomeItemTypeCommunity HomeItemType = "COMMUNITY"
	HomeItemTypeImage     HomeItemType = "IMAGE"
	HomeItemTypeProduct   HomeItemType = "PRODUCT"
	HomeItemTypeBrand     HomeItemType = "BRAND"
	HomeItemTypeTimedeal  HomeItemType = "TIMEDEAL"
)

var AllHomeItemType = []HomeItemType{
	HomeItemTypeCommunity,
	HomeItemTypeImage,
	HomeItemTypeProduct,
	HomeItemTypeBrand,
	HomeItemTypeTimedeal,
}

func (e HomeItemType) IsValid() bool {
	switch e {
	case HomeItemTypeCommunity, HomeItemTypeImage, HomeItemTypeProduct, HomeItemTypeBrand, HomeItemTypeTimedeal:
		return true
	}
	return false
}

func (e HomeItemType) String() string {
	return string(e)
}

func (e *HomeItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HomeItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HomeItemType", str)
	}
	return nil
}

func (e HomeItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatusEnum string

const (
	OrderStatusEnumUnknown           OrderStatusEnum = "UNKNOWN"
	OrderStatusEnumCreated           OrderStatusEnum = "CREATED"
	OrderStatusEnumRecreated         OrderStatusEnum = "RECREATED"
	OrderStatusEnumPaymentPending    OrderStatusEnum = "PAYMENT_PENDING"
	OrderStatusEnumPaymentFinished   OrderStatusEnum = "PAYMENT_FINISHED"
	OrderStatusEnumProductPreparing  OrderStatusEnum = "PRODUCT_PREPARING"
	OrderStatusEnumDeliveryPreparing OrderStatusEnum = "DELIVERY_PREPARING"
	OrderStatusEnumCancelRequested   OrderStatusEnum = "CANCEL_REQUESTED"
	OrderStatusEnumCancelPending     OrderStatusEnum = "CANCEL_PENDING"
	OrderStatusEnumCancelFinished    OrderStatusEnum = "CANCEL_FINISHED"
	OrderStatusEnumDeliveryStarted   OrderStatusEnum = "DELIVERY_STARTED"
	OrderStatusEnumDeliveryFinished  OrderStatusEnum = "DELIVERY_FINISHED"
	OrderStatusEnumConfirmPayment    OrderStatusEnum = "CONFIRM_PAYMENT"
)

var AllOrderStatusEnum = []OrderStatusEnum{
	OrderStatusEnumUnknown,
	OrderStatusEnumCreated,
	OrderStatusEnumRecreated,
	OrderStatusEnumPaymentPending,
	OrderStatusEnumPaymentFinished,
	OrderStatusEnumProductPreparing,
	OrderStatusEnumDeliveryPreparing,
	OrderStatusEnumCancelRequested,
	OrderStatusEnumCancelPending,
	OrderStatusEnumCancelFinished,
	OrderStatusEnumDeliveryStarted,
	OrderStatusEnumDeliveryFinished,
	OrderStatusEnumConfirmPayment,
}

func (e OrderStatusEnum) IsValid() bool {
	switch e {
	case OrderStatusEnumUnknown, OrderStatusEnumCreated, OrderStatusEnumRecreated, OrderStatusEnumPaymentPending, OrderStatusEnumPaymentFinished, OrderStatusEnumProductPreparing, OrderStatusEnumDeliveryPreparing, OrderStatusEnumCancelRequested, OrderStatusEnumCancelPending, OrderStatusEnumCancelFinished, OrderStatusEnumDeliveryStarted, OrderStatusEnumDeliveryFinished, OrderStatusEnumConfirmPayment:
		return true
	}
	return false
}

func (e OrderStatusEnum) String() string {
	return string(e)
}

func (e *OrderStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatusEnum", str)
	}
	return nil
}

func (e OrderStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderTypeEnum string

const (
	OrderTypeEnumUnknown  OrderTypeEnum = "UNKNOWN"
	OrderTypeEnumTimedeal OrderTypeEnum = "TIMEDEAL"
	OrderTypeEnumNormal   OrderTypeEnum = "NORMAL"
)

var AllOrderTypeEnum = []OrderTypeEnum{
	OrderTypeEnumUnknown,
	OrderTypeEnumTimedeal,
	OrderTypeEnumNormal,
}

func (e OrderTypeEnum) IsValid() bool {
	switch e {
	case OrderTypeEnumUnknown, OrderTypeEnumTimedeal, OrderTypeEnumNormal:
		return true
	}
	return false
}

func (e OrderTypeEnum) String() string {
	return string(e)
}

func (e *OrderTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderTypeEnum", str)
	}
	return nil
}

func (e OrderTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatusEnum string

const (
	PaymentStatusEnumCreated         PaymentStatusEnum = "CREATED"
	PaymentStatusEnumConfirmed       PaymentStatusEnum = "CONFIRMED"
	PaymentStatusEnumTimeOut         PaymentStatusEnum = "TIME_OUT"
	PaymentStatusEnumCancled         PaymentStatusEnum = "CANCLED"
	PaymentStatusEnumRefundRequested PaymentStatusEnum = "REFUND_REQUESTED"
	PaymentStatusEnumRefundFinished  PaymentStatusEnum = "REFUND_FINISHED"
)

var AllPaymentStatusEnum = []PaymentStatusEnum{
	PaymentStatusEnumCreated,
	PaymentStatusEnumConfirmed,
	PaymentStatusEnumTimeOut,
	PaymentStatusEnumCancled,
	PaymentStatusEnumRefundRequested,
	PaymentStatusEnumRefundFinished,
}

func (e PaymentStatusEnum) IsValid() bool {
	switch e {
	case PaymentStatusEnumCreated, PaymentStatusEnumConfirmed, PaymentStatusEnumTimeOut, PaymentStatusEnumCancled, PaymentStatusEnumRefundRequested, PaymentStatusEnumRefundFinished:
		return true
	}
	return false
}

func (e PaymentStatusEnum) String() string {
	return string(e)
}

func (e *PaymentStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatusEnum", str)
	}
	return nil
}

func (e PaymentStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortingType string

const (
	SortingTypePriceAscending         SortingType = "PRICE_ASCENDING"
	SortingTypePriceDescending        SortingType = "PRICE_DESCENDING"
	SortingTypeDiscount0_30           SortingType = "DISCOUNT_0_30"
	SortingTypeDiscount30_50          SortingType = "DISCOUNT_30_50"
	SortingTypeDiscount50_70          SortingType = "DISCOUNT_50_70"
	SortingTypeDiscount70_100         SortingType = "DISCOUNT_70_100"
	SortingTypeDiscountrateAscending  SortingType = "DISCOUNTRATE_ASCENDING"
	SortingTypeDiscountrateDescending SortingType = "DISCOUNTRATE_DESCENDING"
)

var AllSortingType = []SortingType{
	SortingTypePriceAscending,
	SortingTypePriceDescending,
	SortingTypeDiscount0_30,
	SortingTypeDiscount30_50,
	SortingTypeDiscount50_70,
	SortingTypeDiscount70_100,
	SortingTypeDiscountrateAscending,
	SortingTypeDiscountrateDescending,
}

func (e SortingType) IsValid() bool {
	switch e {
	case SortingTypePriceAscending, SortingTypePriceDescending, SortingTypeDiscount0_30, SortingTypeDiscount30_50, SortingTypeDiscount50_70, SortingTypeDiscount70_100, SortingTypeDiscountrateAscending, SortingTypeDiscountrateDescending:
		return true
	}
	return false
}

func (e SortingType) String() string {
	return string(e)
}

func (e *SortingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortingType", str)
	}
	return nil
}

func (e SortingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
