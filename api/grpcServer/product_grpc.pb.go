// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/grpcServer/product.proto

package grpcServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	GetProduct(ctx context.Context, in *GetProdcutRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	PutProduct(ctx context.Context, in *PutProductRequest, opts ...grpc.CallOption) (*PutProductResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) GetProduct(ctx context.Context, in *GetProdcutRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.Product/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) PutProduct(ctx context.Context, in *PutProductRequest, opts ...grpc.CallOption) (*PutProductResponse, error) {
	out := new(PutProductResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.Product/PutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.Product/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	GetProduct(context.Context, *GetProdcutRequest) (*GetProductResponse, error)
	PutProduct(context.Context, *PutProductRequest) (*PutProductResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) GetProduct(context.Context, *GetProdcutRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServer) PutProduct(context.Context, *PutProductRequest) (*PutProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProduct not implemented")
}
func (UnimplementedProductServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdcutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.Product/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProduct(ctx, req.(*GetProdcutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_PutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).PutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.Product/PutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).PutProduct(ctx, req.(*PutProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.Product/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcServer.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _Product_GetProduct_Handler,
		},
		{
			MethodName: "PutProduct",
			Handler:    _Product_PutProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _Product_ListProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpcServer/product.proto",
}

// ProductGroupClient is the client API for ProductGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductGroupClient interface {
	GetProductGroup(ctx context.Context, in *GetProductGroupRequest, opts ...grpc.CallOption) (*GetProductGroupResponse, error)
	PostProductGroup(ctx context.Context, in *PostProductGroupRequest, opts ...grpc.CallOption) (*PostProductGroupResponse, error)
	ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error)
	PushProducts(ctx context.Context, in *PushProductsRequest, opts ...grpc.CallOption) (*PushProductsResponse, error)
}

type productGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewProductGroupClient(cc grpc.ClientConnInterface) ProductGroupClient {
	return &productGroupClient{cc}
}

func (c *productGroupClient) GetProductGroup(ctx context.Context, in *GetProductGroupRequest, opts ...grpc.CallOption) (*GetProductGroupResponse, error) {
	out := new(GetProductGroupResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.ProductGroup/GetProductGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGroupClient) PostProductGroup(ctx context.Context, in *PostProductGroupRequest, opts ...grpc.CallOption) (*PostProductGroupResponse, error) {
	out := new(PostProductGroupResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.ProductGroup/PostProductGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGroupClient) ListProductGroups(ctx context.Context, in *ListProductGroupsRequest, opts ...grpc.CallOption) (*ListProductGroupsResponse, error) {
	out := new(ListProductGroupsResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.ProductGroup/ListProductGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGroupClient) PushProducts(ctx context.Context, in *PushProductsRequest, opts ...grpc.CallOption) (*PushProductsResponse, error) {
	out := new(PushProductsResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.ProductGroup/PushProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductGroupServer is the server API for ProductGroup service.
// All implementations must embed UnimplementedProductGroupServer
// for forward compatibility
type ProductGroupServer interface {
	GetProductGroup(context.Context, *GetProductGroupRequest) (*GetProductGroupResponse, error)
	PostProductGroup(context.Context, *PostProductGroupRequest) (*PostProductGroupResponse, error)
	ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error)
	PushProducts(context.Context, *PushProductsRequest) (*PushProductsResponse, error)
	mustEmbedUnimplementedProductGroupServer()
}

// UnimplementedProductGroupServer must be embedded to have forward compatible implementations.
type UnimplementedProductGroupServer struct {
}

func (UnimplementedProductGroupServer) GetProductGroup(context.Context, *GetProductGroupRequest) (*GetProductGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductGroup not implemented")
}
func (UnimplementedProductGroupServer) PostProductGroup(context.Context, *PostProductGroupRequest) (*PostProductGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProductGroup not implemented")
}
func (UnimplementedProductGroupServer) ListProductGroups(context.Context, *ListProductGroupsRequest) (*ListProductGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductGroups not implemented")
}
func (UnimplementedProductGroupServer) PushProducts(context.Context, *PushProductsRequest) (*PushProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProducts not implemented")
}
func (UnimplementedProductGroupServer) mustEmbedUnimplementedProductGroupServer() {}

// UnsafeProductGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductGroupServer will
// result in compilation errors.
type UnsafeProductGroupServer interface {
	mustEmbedUnimplementedProductGroupServer()
}

func RegisterProductGroupServer(s grpc.ServiceRegistrar, srv ProductGroupServer) {
	s.RegisterService(&ProductGroup_ServiceDesc, srv)
}

func _ProductGroup_GetProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGroupServer).GetProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.ProductGroup/GetProductGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGroupServer).GetProductGroup(ctx, req.(*GetProductGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGroup_PostProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProductGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGroupServer).PostProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.ProductGroup/PostProductGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGroupServer).PostProductGroup(ctx, req.(*PostProductGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGroup_ListProductGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGroupServer).ListProductGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.ProductGroup/ListProductGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGroupServer).ListProductGroups(ctx, req.(*ListProductGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGroup_PushProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGroupServer).PushProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.ProductGroup/PushProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGroupServer).PushProducts(ctx, req.(*PushProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductGroup_ServiceDesc is the grpc.ServiceDesc for ProductGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcServer.ProductGroup",
	HandlerType: (*ProductGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductGroup",
			Handler:    _ProductGroup_GetProductGroup_Handler,
		},
		{
			MethodName: "PostProductGroup",
			Handler:    _ProductGroup_PostProductGroup_Handler,
		},
		{
			MethodName: "ListProductGroups",
			Handler:    _ProductGroup_ListProductGroups_Handler,
		},
		{
			MethodName: "PushProducts",
			Handler:    _ProductGroup_PushProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpcServer/product.proto",
}
