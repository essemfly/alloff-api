enum SortingType {
  PRICE_ASCENDING
  PRICE_DESCENDING
  DISCOUNT_0_30
  DISCOUNT_30_50
  DISCOUNT_50_70
  DISCOUNT_70_100
  DISCOUNTRATE_ASCENDING
  DISCOUNTRATE_DESCENDING
}

type Product {
  id: ID!
  category: Category!
  brand: Brand!
  name: String!
  originalPrice: Int!
  soldout: Boolean!
  images: [String!]!
  discountedPrice: Int
  discountRate: Int
  productUrl: String!
  inventory: [Inventory]!
  isUpdated: Boolean!
  isNewProduct: Boolean!
  removed: Boolean!
  information: [KeyValueInfo]
  description: [String!]
  cancelDescription: [String!]
  deliveryDescription: [String!]
}

type Inventory {
  size: String!
  quantity: Int!
}

input InventoryInput {
  size: String!
  quantity: Int!
}

type KeyValueInfo {
  key: String!
  value: String!
}

input ProductsInput {
  offset: Int!
  limit: Int!
  brand: String
  category: String
  sorting: [SortingType]
}

input AlloffCategoryProductsInput {
  offset: Int!
  limit: Int!
  alloffcategoryId: String!
  brandIds: [String!]
  sorting: [SortingType]
}

input LikeProductInput {
  productId: String!
}

type ProductsOutput {
  totalCount: Int!
  offset: Int!
  limit: Int!
  products: [Product]!
}

type AlloffCategoryProducts {
  alloffcategory: AlloffCategory!
  products: [Product]
  allBrands: [Brand]
  selectedBrands: [String!]
  totalCount: Int!
  offset: Int!
  limit: Int!
}

type LikeProductOutput {
  oldProduct: Product!
  newProduct: Product!
}

extend type Query {
  product(id: String!): Product!
  products(input: ProductsInput!): ProductsOutput!
  alloffCategoryProducts(
    input: AlloffCategoryProductsInput!
  ): AlloffCategoryProducts!
  likeproducts: [LikeProductOutput]!
}

extend type Mutation {
  likeProduct(input: LikeProductInput): Boolean!
}
